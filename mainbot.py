import os
import schedule
from selenium.webdriver.common.by import By
import selenium.webdriver
import json
from gigachat import GigaChat
import telebot
from datetime import datetime
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import requests
from dotenv import load_dotenv
load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = 'https://www.binance.com/en/support/announcement/api-updates?c=51&navId=51'
TITLE_CLASS_NAME = 'div.gap-4:nth-child(1) > div:nth-child(1) > a:nth-child(1) > h3:nth-child(1)'
URL_NAME = 'div.gap-4:nth-child(1) > div:nth-child(1) > a:nth-child(1)'
SAVE_FILES = '/home/telbot/data.json'     # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
credentials = os.getenv("GIGACHAT_API")
bot = telebot.TeleBot(os.getenv("TELEGRAM_API"))
# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ GigaChat
model = GigaChat(credentials=credentials, model="GigaChat", verify_ssl_certs=False)
options = selenium.webdriver.FirefoxOptions()
options.add_argument('--headless')  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ GUI)
# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if not os.path.exists(SAVE_FILES):
    with open(SAVE_FILES, 'w') as f:
            json.dump({}, f)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Firefox
keyboard = telebot.types.InlineKeyboardMarkup()
button1 = telebot.types.InlineKeyboardButton('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', callback_data='callback_1')
button2 = telebot.types.InlineKeyboardButton('–°–∞–π—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏', url='https://www.binance.com/en/support/announcement/api-updates?c=51&navId=51')
button3 = telebot.types.InlineKeyboardButton('–¶–µ–Ω–∞ PEPE', callback_data='callback_2')
keyboard.add(button1, button2, button3)
        
@bot.message_handler(commands=['start'])
def send_start(message):
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Binance, —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤ API, –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä—ã–Ω–∫–µ.', reply_markup=keyboard)
        
def write_to_json(SAVE_FILES, data):
    with open(SAVE_FILES, 'r+') as file:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = json.load(file)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
        file_content.update(data)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        file.seek(0)
        
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        json.dump(file_content, file, indent=4)
        
        # –ß–∏—Å—Ç–∏–º –±—É—Ñ–µ—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
        file.truncate()
        
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == 'callback_1':
        try:

            driver = selenium.webdriver.Firefox(options=options)
            driver.get(BASE_URL)
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–π
            title_class = WebDriverWait(driver, 20).until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, TITLE_CLASS_NAME)))
            url_class = WebDriverWait(driver, 20).until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, URL_NAME)))
            titles = [title.text for title in title_class]
            urls = [url_classes.get_attribute('href') for url_classes in url_class]
            data = {'titles': titles,
            'urls': urls}
            print(data)
            driver.quit()
            with open(SAVE_FILES, 'r+') as file:
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                file_content = json.load(file)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
                file_content.update(data)
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
                file.seek(0)
                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                json.dump(file_content, file, indent=4)
                # –ß–∏—Å—Ç–∏–º –±—É—Ñ–µ—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                file.truncate()
            for title, url in zip(data["titles"], data["urls"]):
                bot.send_message(call.message.chat.id, f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã—à–µ–¥—à–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <a href='{url}'>{title}</a>", parse_mode="HTML", reply_markup=keyboard)
                
        except Exception as e:
            bot.send_message(call.message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∞–π—Ç–∞, –æ—à–∏–±–∫–∞ {e}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –ø–æ –∞–¥—Ä–µ—Å—É: .....', reply_markup=keyboard)
    elif call.data == 'callback_2':
        print('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–Ω—ã PEPE1000')
        with open('/home/telbot/price.json', 'r+') as f:
            data = json.load(f)
            book_ticker_data = data['data']
            message = format_telegram_message(book_ticker_data)
            print(message)
        response = model.chat(f'''–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ PEPE1000USDT —á–µ—Ä–µ–∑, —Ä–∞—Å—à–∏—Ñ—Ä—É–π –µ—ë –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Websocket Market Streams API Binance. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –æ —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ, —Å–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:{data}. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô ** –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–∞–∫ –ø–∏—Å–∞—Ç—å, –≤ –∫–æ–Ω—Ü–µ –ø–∏—à–∏ —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                                "üìä –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã üìä\n\n"
                                –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: , ( —Ç–æ–∫–µ–Ω–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ))\n"
                                –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: , ( —Ç–æ–∫–µ–Ω–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ))\n"
                                –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:  UTC (–∏–∑ —Ñ–∞–π–ª–∞)"''')
        answer = response.choices[0].message.content
        
        bot.send_message(call.message.chat.id, answer, reply_markup=keyboard)
                

def format_telegram_message(book_ticker_data):
    received_at = book_ticker_data["received_at"]
    best_bid_price = book_ticker_data["b"]
    bid_name = book_ticker_data["s"]
    best_bid_quantity = book_ticker_data["B"]
    best_ask_price = book_ticker_data["a"]
    best_ask_quantity = book_ticker_data["A"]
    formatted_time = datetime.fromisoformat(received_at).strftime('%Y-%m-%d %H:%M:%S')
    
    message = (
        f"üìä –¶–µ–Ω–∞ {bid_name} üìä\n\n"
        f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {best_bid_price} ({best_bid_quantity} —Ç–æ–∫–µ–Ω–æ–≤)\n"
        f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {best_ask_price} ({best_ask_quantity} —Ç–æ–∫–µ–Ω–æ–≤)\n"
        f"\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {formatted_time} UTC"
    )
    
    return message

def main():
    start_time = datetime.now()
    elapsed_time = start_time - datetime.now()
        
    if elapsed_time > 1800:
        url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

        payload={
        'scope': 'GIGACHAT_API_PERS'
        }
        headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': 'c11a0542-c022-4380-845f-15f23ada1d07',
        'Authorization': 'Basic <Authorization key>'
        }

        response = requests.request("POST", url, headers=headers, data=payload)

        print(response.text)

def check_data(message):
    driver = selenium.webdriver.Firefox(options=options)
    driver.get(BASE_URL)
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–π
    title_class = driver.find_elements(By.CSS_SELECTOR, TITLE_CLASS_NAME)
    url_class = driver.find_elements(By.CSS_SELECTOR, URL_NAME)
    titles = [title.text for title in title_class]
    urls = [url_classes.get_attribute('href') for url_classes in url_class]
    data = {'titles': titles,
                    'urls': urls}
    print(data)
    for old_title, old_url in zip(data["titles"], data["urls"]):
        if old_title != titles and old_url !=urls:
            data = {'titles': titles,
                    'urls': urls}
            print(f'–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}')
            bot.send_message(message.chat.id, f"–í—ã—à–ª–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <a href='{urls}'>{titles}</a>", parse_mode="HTML", reply_markup=keyboard)
    driver.quit()
    with open(SAVE_FILES, 'r+') as file:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = json.load(file)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
        file_content.update(data)
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        file.seek(0)
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        json.dump(file_content, file, indent=4)
        # –ß–∏—Å—Ç–∏–º –±—É—Ñ–µ—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
        file.truncate()
                



schedule.every().day.at("00:00").do(check_data)
if __name__ == "__main__":
    bot.polling()
    main()
    schedule.run_pending()
    